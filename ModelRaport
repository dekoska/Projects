{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1c3f4f70-1ade-486a-9a36-ff4ed8f0aa5e",
   "metadata": {},
   "source": [
    "# Analiza i Ocena Skuteczności Modelu Machine Learning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da9a1446-88c7-4be6-9766-84263ea60a0e",
   "metadata": {},
   "source": [
    "### Spis treści:\n",
    "1. [Cele i motywacje](#7)\n",
    "2. [Załadowanie zbioru danych](#0)\n",
    "3. [Przygotowanie danych](#1)\n",
    "4. [Podział danych](#2)\n",
    "5. [Trenowanie modelu różnymi metodami](#3)\n",
    "6. [Metryki oceny modelu](#4)\n",
    "7. [Wybór metody](#5)\n",
    "8. [Wnioski](#6)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eeff75e8-d6fe-49ff-b5ff-3a564871a5c1",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### <a name='7'></a> Cele i motywacje\n",
    "\n",
    "### Cele\n",
    "Celem raportu jest przeprowadzenie kompleksowej analizy wybranego zbioru danych oraz opracowanie modelu predykcyjnego, który umożliwi precyzyjne prognozowanie wyników GPA. Stworzenie dokładnego modelu pozwoli lepiej zrozumieć czynniki wpływające na wyniki edukacyjne, co może przyczynić się do wdrożenia skuteczniejszych strategii wspierających proces nauczania.\n",
    "\n",
    "### Motywacje\n",
    "Analiza danych dotyczących kluczowych czynników wpływających na wyniki edukacyjne uczniów może dostarczyć cennych informacji zarówno dla instytucji edukacyjnych, jak i uczniów. Zrozumienie zależności między różnymi zmiennymi, takimi jak frekwencja, wsparcie rodziców czy czas poświęcony na naukę, pozwala na wyciągnięcie wniosków, które mogą przyczynić się do poprawy efektywności systemu edukacyjnego."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b32b939a-15df-4225-91e4-938d2d276104",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Import bibliotek"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a30674c4-583c-4e40-86f2-53aad5635793",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: scikit-learn in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (1.6.0)\n",
      "Requirement already satisfied: mlcroissant in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (1.0.12)\n",
      "Requirement already satisfied: pandas in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (2.2.3)\n",
      "Requirement already satisfied: numpy in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (2.2.1)\n",
      "Requirement already satisfied: xgboost in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (2.1.3)\n",
      "Requirement already satisfied: matplotlib in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (3.10.0)\n",
      "Requirement already satisfied: scipy>=1.6.0 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from scikit-learn) (1.15.0)\n",
      "Requirement already satisfied: joblib>=1.2.0 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from scikit-learn) (1.4.2)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from scikit-learn) (3.5.0)\n",
      "Requirement already satisfied: absl-py in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from mlcroissant) (2.1.0)\n",
      "Requirement already satisfied: etils>=1.7.0 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from etils[epath]>=1.7.0->mlcroissant) (1.11.0)\n",
      "Requirement already satisfied: jsonpath-rw in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from mlcroissant) (1.4.0)\n",
      "Requirement already satisfied: networkx in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from mlcroissant) (3.4.2)\n",
      "Requirement already satisfied: pandas-stubs in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from mlcroissant) (2.2.3.241126)\n",
      "Requirement already satisfied: python-dateutil in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from mlcroissant) (2.9.0.post0)\n",
      "Requirement already satisfied: rdflib in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from mlcroissant) (7.1.1)\n",
      "Requirement already satisfied: requests in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from mlcroissant) (2.32.3)\n",
      "Requirement already satisfied: tqdm in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from mlcroissant) (4.67.1)\n",
      "Requirement already satisfied: pytz>=2020.1 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from pandas) (2024.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from pandas) (2024.2)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from matplotlib) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from matplotlib) (4.55.3)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: packaging>=20.0 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from matplotlib) (24.2)\n",
      "Requirement already satisfied: pillow>=8 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from matplotlib) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from matplotlib) (3.2.1)\n",
      "Requirement already satisfied: fsspec in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from etils[epath]>=1.7.0->mlcroissant) (2024.9.0)\n",
      "Requirement already satisfied: importlib_resources in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from etils[epath]>=1.7.0->mlcroissant) (6.5.2)\n",
      "Requirement already satisfied: typing_extensions in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from etils[epath]>=1.7.0->mlcroissant) (4.12.2)\n",
      "Requirement already satisfied: zipp in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from etils[epath]>=1.7.0->mlcroissant) (3.21.0)\n",
      "Requirement already satisfied: six>=1.5 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from python-dateutil->mlcroissant) (1.17.0)\n",
      "Requirement already satisfied: ply in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from jsonpath-rw->mlcroissant) (3.11)\n",
      "Requirement already satisfied: decorator in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from jsonpath-rw->mlcroissant) (5.1.1)\n",
      "Requirement already satisfied: types-pytz>=2022.1.1 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from pandas-stubs->mlcroissant) (2024.2.0.20241221)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from requests->mlcroissant) (3.4.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from requests->mlcroissant) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from requests->mlcroissant) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/zosia/.local/pipx/venvs/notebook/lib/python3.13/site-packages (from requests->mlcroissant) (2024.12.14)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install scikit-learn mlcroissant pandas numpy xgboost matplotlib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ea37645-ce32-4a7d-8673-38cd33302fa6",
   "metadata": {},
   "source": [
    "### <a name='1'></a> Załadowanie zbioru danych"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2fd3fbf4-e6a0-4a95-8fbd-87b3b452cfe0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.info of       StudentID  Age  Gender  Ethnicity  ParentalEducation  StudyTimeWeekly  \\\n",
       "0          1001   17       1          0                  2        19.833723   \n",
       "1          1002   18       0          0                  1        15.408756   \n",
       "2          1003   15       0          2                  3         4.210570   \n",
       "3          1004   17       1          0                  3        10.028829   \n",
       "4          1005   17       1          0                  2         4.672495   \n",
       "...         ...  ...     ...        ...                ...              ...   \n",
       "2387       3388   18       1          0                  3        10.680555   \n",
       "2388       3389   17       0          0                  1         7.583217   \n",
       "2389       3390   16       1          0                  2         6.805500   \n",
       "2390       3391   16       1          1                  0        12.416653   \n",
       "2391       3392   16       1          0                  2        17.819907   \n",
       "\n",
       "      Absences  Tutoring  ParentalSupport  Extracurricular  Sports  Music  \\\n",
       "0            7         1                2                0       0      1   \n",
       "1            0         0                1                0       0      0   \n",
       "2           26         0                2                0       0      0   \n",
       "3           14         0                3                1       0      0   \n",
       "4           17         1                3                0       0      0   \n",
       "...        ...       ...              ...              ...     ...    ...   \n",
       "2387         2         0                4                1       0      0   \n",
       "2388         4         1                4                0       1      0   \n",
       "2389        20         0                2                0       0      0   \n",
       "2390        17         0                2                0       1      1   \n",
       "2391        13         0                2                0       0      0   \n",
       "\n",
       "      Volunteering       GPA  GradeClass  \n",
       "0                0  2.929196         2.0  \n",
       "1                0  3.042915         1.0  \n",
       "2                0  0.112602         4.0  \n",
       "3                0  2.054218         3.0  \n",
       "4                0  1.288061         4.0  \n",
       "...            ...       ...         ...  \n",
       "2387             0  3.455509         0.0  \n",
       "2388             0  3.279150         4.0  \n",
       "2389             1  1.142333         2.0  \n",
       "2390             0  1.803297         1.0  \n",
       "2391             1  2.140014         1.0  \n",
       "\n",
       "[2392 rows x 15 columns]>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "df_raw = pd.read_csv(\"Student_performance_data _.csv\")\n",
    "df = df_raw\n",
    "df.info"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88494c3a-ed33-4762-9631-da7d5ee098c8",
   "metadata": {},
   "source": [
    "Przedstawiony zbiór danych pochodzi z https://www.kaggle.com/datasets/rabieelkharoua/students-performance-dataset. Dane zawierają 2392 rekordy, które opisują szczegółowe informacje o uczniach szkół średnich. Zbiór składa się z 14 kolumn, obejmujących takie czynniki jak: dane demograficzne, nawyki związane z nauką, wsparcie rodziców, rodzaj zajęć dodatkowych, średnia ocen oraz końcowa ocena uczniów. Nazwy kolumn zawierają:\n",
    "### **Student ID**\n",
    "- Indeks osoby, od `1001` do `3392`.\n",
    "\n",
    "### **Age**\n",
    "- Wiek osoby, od `15` do `18`.\n",
    "\n",
    "### **Gender**\n",
    "- Płeć:\n",
    "  - `0`: mężczyzna,\n",
    "  - `1`: kobieta.\n",
    "\n",
    "### **Ethnicity**\n",
    "- Pochodzenie etniczne osoby:\n",
    "  - `0`: kaukaskie,\n",
    "  - `1`: afroamerykańskie,\n",
    "  - `2`: azjatyckie,\n",
    "  - `3`: inne.\n",
    "\n",
    "### **Parental Education**\n",
    "- Wykształcenie rodziców:\n",
    "  - `0`: żadne,\n",
    "  - `1`: średnie,\n",
    "  - `2`: wyższe (niepełny licencjat),\n",
    "  - `3`: licencjat,\n",
    "  - `4`: wyższe niż licencjat.\n",
    "\n",
    "### **Study Time Weekly**\n",
    "- Ilość czasu, jaką osoba spędza przy nauce w trakcie tygodnia (w godzinach), od `0` do `20`.\n",
    "\n",
    "### **Absences**\n",
    "- Ilość nieobecności podczas całego roku szkolnego, od `0` do `30`.\n",
    "\n",
    "### **Tutoring**\n",
    "- Czy osoba bierze korepetycje:\n",
    "  - `tak`/`nie`.\n",
    "\n",
    "### **Parental Support**\n",
    "- Wsparcie rodziców:\n",
    "  - `0`: brak,\n",
    "  - `1`: niskie,\n",
    "  - `2`: umiarkowane,\n",
    "  - `3`: duże,\n",
    "  - `4`: bardzo duże.\n",
    "\n",
    "### **Extracurricular**\n",
    "- Czy osoba uczęszcza na zajęcia dodatkowe:\n",
    "  - `tak`/`nie`.\n",
    "\n",
    "### **Sport**\n",
    "- Czy osoba uczęszcza na zajęcia sportowe:\n",
    "  - `tak`/`nie`.\n",
    "\n",
    "### **Music**\n",
    "- Czy osoba uczęszcza na zajęcia muzyczne:\n",
    "  - `tak`/`nie`.\n",
    "\n",
    "### **Volunteering**\n",
    "- Czy osoba bierze udział w wolontariacie:\n",
    "  - `tak`/`nie`.\n",
    "\n",
    "### **GPA**\n",
    "- Średnia ocen, od `2.0` do `4.0`.\n",
    "\n",
    "### **GradeClass**\n",
    "- Ocena końcowa wystawiana na podstawie średniej ocen (GPA) według następującej skali:\n",
    "  - `0`: **A** (GPA >= 3.5),\n",
    "  - `1`: **B** (3.0 <= GPA < 3.5),\n",
    "  - `2`: **C** (2.5 <= GPA < 3.0),\n",
    "  - `3`: **D** (2.0 <= GPA < 2.5),\n",
    "  - `4`: **F** (GPA < 2.0).\n",
    "\n",
    "Zbiór jest kompletny, nie posiada brakujących wartości w wierszach."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15d45579-5918-409f-948f-2895632f874b",
   "metadata": {},
   "source": [
    "### <a name='2'></a> Przygotowanie danych"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab61f603-c781-4fdf-b905-f865e7e2ec0d",
   "metadata": {},
   "source": [
    "Przed rozpoczęciem procesu modelowania upewniłam się, że wszystkie wartości w zbiorze danych są numeryczne. Sprawdziłam jakie zakresy liczb występują w każdej kolumnie. Zdecydowałam zmienić ich wartości za pomocą procesu normalizacji min-max. Dzięki temu ujednoliciłam zakres wszystkich rekordów, aby był taki sam. Bez tego model mógłby uznać niektóre kolumny za ważniejsze od kolumn z mniejszym zakresem, dzięki czemu model potraktuje wszystkie cechy za tak samo ważne w procesie predykcji. Na koniec upewniłam się, że nie ma żadnych brakujących wartości w całym zbiorze danych.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0031ce41-9aa0-43c3-9972-278ad51cde04",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2392 entries, 0 to 2391\n",
      "Data columns (total 15 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   StudentID          2392 non-null   int64  \n",
      " 1   Age                2392 non-null   int64  \n",
      " 2   Gender             2392 non-null   int64  \n",
      " 3   Ethnicity          2392 non-null   int64  \n",
      " 4   ParentalEducation  2392 non-null   int64  \n",
      " 5   StudyTimeWeekly    2392 non-null   float64\n",
      " 6   Absences           2392 non-null   int64  \n",
      " 7   Tutoring           2392 non-null   int64  \n",
      " 8   ParentalSupport    2392 non-null   int64  \n",
      " 9   Extracurricular    2392 non-null   int64  \n",
      " 10  Sports             2392 non-null   int64  \n",
      " 11  Music              2392 non-null   int64  \n",
      " 12  Volunteering       2392 non-null   int64  \n",
      " 13  GPA                2392 non-null   float64\n",
      " 14  GradeClass         2392 non-null   float64\n",
      "dtypes: float64(3), int64(12)\n",
      "memory usage: 280.4 KB\n"
     ]
    }
   ],
   "source": [
    "df.info() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "174564d5-e5e3-4ee6-9b02-f53fdad0e1b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>StudentID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>ParentalEducation</th>\n",
       "      <th>StudyTimeWeekly</th>\n",
       "      <th>Absences</th>\n",
       "      <th>Tutoring</th>\n",
       "      <th>ParentalSupport</th>\n",
       "      <th>Extracurricular</th>\n",
       "      <th>Sports</th>\n",
       "      <th>Music</th>\n",
       "      <th>Volunteering</th>\n",
       "      <th>GPA</th>\n",
       "      <th>GradeClass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1001</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>19.833723</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.929196</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1002</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>15.408756</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.042915</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1003</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4.210570</td>\n",
       "      <td>26</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.112602</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1004</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>10.028829</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.054218</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1005</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>4.672495</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.288061</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   StudentID  Age  Gender  Ethnicity  ParentalEducation  StudyTimeWeekly  \\\n",
       "0       1001   17       1          0                  2        19.833723   \n",
       "1       1002   18       0          0                  1        15.408756   \n",
       "2       1003   15       0          2                  3         4.210570   \n",
       "3       1004   17       1          0                  3        10.028829   \n",
       "4       1005   17       1          0                  2         4.672495   \n",
       "\n",
       "   Absences  Tutoring  ParentalSupport  Extracurricular  Sports  Music  \\\n",
       "0         7         1                2                0       0      1   \n",
       "1         0         0                1                0       0      0   \n",
       "2        26         0                2                0       0      0   \n",
       "3        14         0                3                1       0      0   \n",
       "4        17         1                3                0       0      0   \n",
       "\n",
       "   Volunteering       GPA  GradeClass  \n",
       "0             0  2.929196         2.0  \n",
       "1             0  3.042915         1.0  \n",
       "2             0  0.112602         4.0  \n",
       "3             0  2.054218         3.0  \n",
       "4             0  1.288061         4.0  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "52a72b79-04d0-4f9a-bdeb-143b312d1322",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>StudentID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>ParentalEducation</th>\n",
       "      <th>StudyTimeWeekly</th>\n",
       "      <th>Absences</th>\n",
       "      <th>Tutoring</th>\n",
       "      <th>ParentalSupport</th>\n",
       "      <th>Extracurricular</th>\n",
       "      <th>Sports</th>\n",
       "      <th>Music</th>\n",
       "      <th>Volunteering</th>\n",
       "      <th>GPA</th>\n",
       "      <th>GradeClass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.992773</td>\n",
       "      <td>0.241379</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.732299</td>\n",
       "      <td>0.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000418</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.771270</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.760729</td>\n",
       "      <td>0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000836</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.75</td>\n",
       "      <td>0.210718</td>\n",
       "      <td>0.896552</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.028151</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.001255</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.75</td>\n",
       "      <td>0.501965</td>\n",
       "      <td>0.482759</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.513555</td>\n",
       "      <td>0.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.001673</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.50</td>\n",
       "      <td>0.233840</td>\n",
       "      <td>0.586207</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.322015</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   StudentID       Age  Gender  Ethnicity  ParentalEducation  StudyTimeWeekly  \\\n",
       "0   0.000000  0.666667     1.0   0.000000               0.50         0.992773   \n",
       "1   0.000418  1.000000     0.0   0.000000               0.25         0.771270   \n",
       "2   0.000836  0.000000     0.0   0.666667               0.75         0.210718   \n",
       "3   0.001255  0.666667     1.0   0.000000               0.75         0.501965   \n",
       "4   0.001673  0.666667     1.0   0.000000               0.50         0.233840   \n",
       "\n",
       "   Absences  Tutoring  ParentalSupport  Extracurricular  Sports  Music  \\\n",
       "0  0.241379       1.0             0.50              0.0     0.0    1.0   \n",
       "1  0.000000       0.0             0.25              0.0     0.0    0.0   \n",
       "2  0.896552       0.0             0.50              0.0     0.0    0.0   \n",
       "3  0.482759       0.0             0.75              1.0     0.0    0.0   \n",
       "4  0.586207       1.0             0.75              0.0     0.0    0.0   \n",
       "\n",
       "   Volunteering       GPA  GradeClass  \n",
       "0           0.0  0.732299        0.50  \n",
       "1           0.0  0.760729        0.25  \n",
       "2           0.0  0.028151        1.00  \n",
       "3           0.0  0.513555        0.75  \n",
       "4           0.0  0.322015        1.00  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "scaler = MinMaxScaler()\n",
    "scaled = scaler.fit(df)\n",
    "df = scaled.transform(df)\n",
    "\n",
    "df = pd.DataFrame(data=df, columns=['StudentID', 'Age', 'Gender', 'Ethnicity', 'ParentalEducation',\n",
    "       'StudyTimeWeekly', 'Absences', 'Tutoring', 'ParentalSupport',\n",
    "       'Extracurricular', 'Sports', 'Music', 'Volunteering', 'GPA',\n",
    "       'GradeClass'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "b867f2ee-930c-42ae-a95c-b2be3bb12d05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "StudentID            0\n",
      "Age                  0\n",
      "Gender               0\n",
      "Ethnicity            0\n",
      "ParentalEducation    0\n",
      "StudyTimeWeekly      0\n",
      "Absences             0\n",
      "Tutoring             0\n",
      "ParentalSupport      0\n",
      "Extracurricular      0\n",
      "Sports               0\n",
      "Music                0\n",
      "Volunteering         0\n",
      "GPA                  0\n",
      "GradeClass           0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(df.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45dfe8b5-a437-4331-b7f5-bee727977dcf",
   "metadata": {},
   "source": [
    "### <a name='3'></a> Podział danych"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "053fa8ff-dbf8-4376-80f4-464727fa9de3",
   "metadata": {},
   "source": [
    "Za pomocą biblioteki scikit-learn podzieliłam przygotowane wcześniej dane na zbiór testowy i treningowy. Wyznaczyłam również kolumnę docelową, która ma być wynikiem predykcji. Kolumna StudentID oraz GradeClass zostały wyrzucone z danych przeznaczonych do predykcji. ID nie jest potrzebne do predykcji, ponieważ nie ma żadnej wartości informacyjnej a jest jedynie indeksem ucznia, a GradeClass jest mocno skorelowane z docelową zmienną GPA i mogłoby sztucznie zawyżać dokładność modelu."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "948177bc-90f1-4015-8e97-b33914a14aef",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "df.pop(\"StudentID\")\n",
    "df.pop(\"GradeClass\")\n",
    "target = df.pop(\"GPA\")\n",
    "X_train, X_test, y_train, y_test = train_test_split(df, target, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ecb20a0-3212-465e-bf08-79298b91ef49",
   "metadata": {},
   "source": [
    "### <a name='4'></a> Trenowanie modelu różnymi metodami\n",
    "Podczas tworzenia modelu i szukania najskuteczniejszego sposobu do jego treningu, przygotowałam 4 metody."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "208c5fbd-da30-490d-8cb1-1106e612389b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import r2_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c17b0f95-71d2-496d-8952-3338470543a4",
   "metadata": {},
   "source": [
    "### Regresja liniowa\n",
    "Regresja liniowa to metoda polegająca na dopasowaniu prostej linii do jak największej ilości punktów, zmniejszając różnice między wartościami rzeczywistymi i przewidywanymi."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f256051b-71cc-4cf3-94d3-101802b8233e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "lin_regressor = LinearRegression()\n",
    "lin_regressor.fit(X_train, y_train)\n",
    "y_pred_lin = lin_regressor.predict(X_test)\n",
    "r2_lin = r2_score(y_test, y_pred_lin)\n",
    "errors_lin = y_pred_lin - y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e003398-8c3e-4262-9228-8b73b0a44edc",
   "metadata": {},
   "source": [
    "### Regresja Ridge\n",
    "Regresja Ridge, inaczej grzbietowa to modyfikacja zwykłej regresji liniowej. Dąży do minimalizacji funkcji celu, która składa się z dwóch składników: błędu dopasowania (sumy kwadratów różnic pomiędzy rzeczywistymi wartościami a przewidywanymi wartościami modelu) i kary regularyzacyjnej L2. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f68f6d59-528c-4f57-bbb0-68e750b1e01c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Ridge\n",
    "\n",
    "ridge = Ridge(alpha=1.0)\n",
    "ridge.fit(X_train, y_train)\n",
    "y_pred_ridge = ridge.predict(X_test)\n",
    "r2_ridge = r2_score(y_test, y_pred_ridge)\n",
    "errors_ridge = y_pred_ridge - y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62509c93-71a8-4987-b665-48a4bcf164b2",
   "metadata": {},
   "source": [
    "### Gradient boosting\n",
    "Drzewo decyzycje  działa poprzez dzielenie zbioru danych na coraz mniejsze części. Za pomocją zdarzeń losowych i możliwych różnych wariantów decyzji aż do osiągnięcia tzw. liści, które odpowiadają ostatecznym wartościom.\n",
    "Wzmocnienie gradientowe to ulepszona metoda drzewa decyzyjnego. Tworzy kolejne drzewa, które wykazują mniej błędów niż poprzednie. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c35abcfc-42c4-46aa-b9bb-222b8c7fff35",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost as xgb\n",
    "\n",
    "model = xgb.XGBRegressor(n_estimators=100, random_state=42)\n",
    "model.fit(X_train, y_train)\n",
    "y_pred_xgb = model.predict(X_test)\n",
    "r2_xgb = r2_score(y_test, y_pred_xgb)\n",
    "errors_xgb = y_pred_xgb - y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1055e10-d90e-4816-816b-d88c35329d05",
   "metadata": {},
   "source": [
    "### Random Forest Regressor\n",
    "Random Forest Regressor to algorytm również oparty na drzewach decyzyjnych. Każde drzewo jest trenowane na losowej próbce danych, a wynik jest średnią przewidywań wszystkich drzew."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "919d4dcc-cc8a-427a-9bd8-a07300f7a4f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "model = RandomForestRegressor(n_estimators=200, random_state=42)\n",
    "model.fit(X_train, y_train)\n",
    "y_pred_rfr = model.predict(X_test)\n",
    "r2_rfr = r2_score(y_test, y_pred_rfr)\n",
    "errors_rfr = y_pred_rfr - y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff4a4c85-a064-438b-8fdc-cb14525e059b",
   "metadata": {},
   "source": [
    "### <a name='4'></a> Metryki\n",
    "Dla wszystkich czterech metod wyznaczyłam metryki R2, średni błąd absolutny, średni błąd predykcji oraz odchylenie standardowe błędów. Ich wyniki zebrałam w tabeli oraz zaznaczyłam które metody miały najwyższe wyniki. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "23f5c9bb-8c92-430a-ae3a-8dc53fafb312",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "#T_e2f8d thead th {\n",
       "  text-align: center;\n",
       "  font-weight: bold;\n",
       "}\n",
       "#T_e2f8d tbody td {\n",
       "  text-align: center;\n",
       "}\n",
       "</style>\n",
       "<table id=\"T_e2f8d\">\n",
       "  <caption>Model Comparison Table</caption>\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th id=\"T_e2f8d_level0_col0\" class=\"col_heading level0 col0\" >Model</th>\n",
       "      <th id=\"T_e2f8d_level0_col1\" class=\"col_heading level0 col1\" >R²</th>\n",
       "      <th id=\"T_e2f8d_level0_col2\" class=\"col_heading level0 col2\" >MAE</th>\n",
       "      <th id=\"T_e2f8d_level0_col3\" class=\"col_heading level0 col3\" >MPE</th>\n",
       "      <th id=\"T_e2f8d_level0_col4\" class=\"col_heading level0 col4\" >SDE</th>\n",
       "      <th id=\"T_e2f8d_level0_col5\" class=\"col_heading level0 col5\" >Best</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td id=\"T_e2f8d_row0_col0\" class=\"data row0 col0\" >Linear Regression</td>\n",
       "      <td id=\"T_e2f8d_row0_col1\" class=\"data row0 col1\" >0.953247</td>\n",
       "      <td id=\"T_e2f8d_row0_col2\" class=\"data row0 col2\" >0.038824</td>\n",
       "      <td id=\"T_e2f8d_row0_col3\" class=\"data row0 col3\" >0.000592</td>\n",
       "      <td id=\"T_e2f8d_row0_col4\" class=\"data row0 col4\" >0.049153</td>\n",
       "      <td id=\"T_e2f8d_row0_col5\" class=\"data row0 col5\" >R² ; MAE ; SDE ; </td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td id=\"T_e2f8d_row1_col0\" class=\"data row1 col0\" >Ridge Regression</td>\n",
       "      <td id=\"T_e2f8d_row1_col1\" class=\"data row1 col1\" >0.953039</td>\n",
       "      <td id=\"T_e2f8d_row1_col2\" class=\"data row1 col2\" >0.038925</td>\n",
       "      <td id=\"T_e2f8d_row1_col3\" class=\"data row1 col3\" >0.000559</td>\n",
       "      <td id=\"T_e2f8d_row1_col4\" class=\"data row1 col4\" >0.049263</td>\n",
       "      <td id=\"T_e2f8d_row1_col5\" class=\"data row1 col5\" ></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td id=\"T_e2f8d_row2_col0\" class=\"data row2 col0\" >Gradient Boosting</td>\n",
       "      <td id=\"T_e2f8d_row2_col1\" class=\"data row2 col1\" >0.930091</td>\n",
       "      <td id=\"T_e2f8d_row2_col2\" class=\"data row2 col2\" >0.047647</td>\n",
       "      <td id=\"T_e2f8d_row2_col3\" class=\"data row2 col3\" >0.000110</td>\n",
       "      <td id=\"T_e2f8d_row2_col4\" class=\"data row2 col4\" >0.060109</td>\n",
       "      <td id=\"T_e2f8d_row2_col5\" class=\"data row2 col5\" ></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td id=\"T_e2f8d_row3_col0\" class=\"data row3 col0\" >Random Forest Regression</td>\n",
       "      <td id=\"T_e2f8d_row3_col1\" class=\"data row3 col1\" >0.928757</td>\n",
       "      <td id=\"T_e2f8d_row3_col2\" class=\"data row3 col2\" >0.046990</td>\n",
       "      <td id=\"T_e2f8d_row3_col3\" class=\"data row3 col3\" >-0.000136</td>\n",
       "      <td id=\"T_e2f8d_row3_col4\" class=\"data row3 col4\" >0.060680</td>\n",
       "      <td id=\"T_e2f8d_row3_col5\" class=\"data row3 col5\" >MPE ; </td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x13a8df4d0>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import mean_absolute_error\n",
    "import numpy as np\n",
    "\n",
    "results = { \"Model\": [\"Linear Regression\", \"Ridge Regression\", \"Gradient Boosting\", \"Random Forest Regression\"],\n",
    "    \"R²\": [\n",
    "        r2_score(y_test, y_pred_lin),\n",
    "        r2_score(y_test, y_pred_ridge),\n",
    "        r2_score(y_test, y_pred_xgb),\n",
    "        r2_score(y_test, y_pred_rfr)\n",
    "    ],\n",
    "    \"MAE\": [\n",
    "        mean_absolute_error(y_test, y_pred_lin),\n",
    "        mean_absolute_error(y_test, y_pred_ridge),\n",
    "        mean_absolute_error(y_test, y_pred_xgb),\n",
    "        mean_absolute_error(y_test, y_pred_rfr)\n",
    "    ],\n",
    "    \"MPE\": [\n",
    "        np.mean(y_pred_lin - y_test),\n",
    "        np.mean(y_pred_ridge - y_test),\n",
    "        np.mean(y_pred_xgb - y_test),\n",
    "        np.mean(y_pred_rfr - y_test)\n",
    "    ],\n",
    "    \"SDE\": [\n",
    "        np.std(y_pred_lin - y_test),\n",
    "        np.std(y_pred_ridge - y_test),\n",
    "        np.std(y_pred_xgb - y_test),\n",
    "        np.std(y_pred_rfr - y_test)\n",
    "    ]\n",
    "}\n",
    "\n",
    "df_results = pd.DataFrame(results)\n",
    "\n",
    "df_results[\"Best\"] = \"\"\n",
    "for metric in [\"R²\", \"MAE\", \"MPE\", \"SDE\"]:\n",
    "    if metric == \"R²\":\n",
    "        best_index = df_results[metric].idxmax()\n",
    "    else:\n",
    "        best_index = df_results[metric].idxmin()\n",
    "    df_results.loc[best_index, \"Best\"] += f\"{metric} ; \"\n",
    "\n",
    "styled_df = df_results.style.hide(axis=\"index\").set_table_styles([\n",
    "    {\"selector\": \"thead th\", \"props\": [(\"text-align\", \"center\"), (\"font-weight\", \"bold\")]},\n",
    "    {\"selector\": \"tbody td\", \"props\": [(\"text-align\", \"center\")]}\n",
    "]).set_caption(\"Model Comparison Table\")\n",
    "\n",
    "styled_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1fe1c48-ac95-40bd-bb4d-957c289942e4",
   "metadata": {},
   "source": [
    "### <a name='5'></a> Wybór metody\n",
    "Chociaż wyniki były zbliżone do siebie to najlepiej wypadła w naszym przypadku metoda regresji liniowej. \n",
    "Analiza wyników dla regresji liniowej:\n",
    "- R2 na poziomie 0.95 oznacza, że model jest świetnie dopasowany do danego zbioru danych. Zgodnie z zasadą R-Squared, im bliżej 1 jest wartość, tym bardziej model pasuje do danych.\n",
    "- Średni błąd absolutny (MAE) wylicza średnią różnice między między rzeczywistym a przewidywanym wynikiem. Wynik 0.04 pokazuje niewielką różnice w przewidywaniach.\n",
    "- Średni błąd predykcji wynosi -0.0006, czyli model nie ma tendencji do zaniżania ani zawyżania wyników.\n",
    "- Odchylenie standardowe błędów wynoszące 0.05 oznacza, że znaczna większość przewidywań mieści się w granicach około 0.25 od rzeczywistej wartości.\n",
    "W ramach dodatkowych testów sprawdzimy:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de17d668-0d1c-40db-8921-96fff482611e",
   "metadata": {},
   "source": [
    "### Przeuczenie modelu:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "24002c92-fa36-4499-8d9a-b4eb868df311",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Brak wyraźnych oznak przeuczenia.\n"
     ]
    }
   ],
   "source": [
    "y_train_pred_lin = lin_regressor.predict(X_train)\n",
    "r2_train_lin = r2_score(y_train, y_train_pred_lin)\n",
    "mae_train_lin = mean_absolute_error(y_train, y_train_pred_lin)\n",
    "\n",
    "r2_test_lin = r2_score(y_test, y_pred_lin)\n",
    "mae_test_lin = mean_absolute_error(y_test, y_pred_lin)\n",
    "\n",
    "if r2_train_lin - r2_test_lin > 0.1:\n",
    "    print(\"Model może być przeuczony.\")\n",
    "else:\n",
    "    print(\"Brak wyraźnych oznak przeuczenia.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44791856-fe06-4d1d-ab1b-23adbe4c88f6",
   "metadata": {},
   "source": [
    "### Wizualizacja rozkładu błędów"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "159b0687-5bfc-4879-bcba-7541e3a7fff4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.hist(errors_lin, bins=30, edgecolor='black')\n",
    "plt.title(\"Rozkład błędów predykcji\")\n",
    "plt.xlabel(\"Błąd (y_test - y_pred)\")\n",
    "plt.ylabel(\"Liczba wystąpień\")\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40ebb360-82b5-4076-85f4-32ee1621a22f",
   "metadata": {},
   "source": [
    "- Wykres ma kształt zbliżony do rozkładu normalnego, brak tendencji do systematycznego zawyżania ani zaniżania przewidywań\n",
    "- Największa liczba błędów skupia się wokół wartości bliskiej zeru, co oznacza, że w większości przypadków model generuje prawie dokładne prognozy\n",
    "- Większość błędów mieści się w zakresie od około -0.10 do 0.10, co sugeruje stosunkowo niski poziom błędu predykcji\n",
    "- Widać odchylenia na obu końcach rozkładu, jednak ich liczba jest niewielka, co sugeruje, że model radzi sobie dobrze w większości przypadków, ale może mieć trudności z dokładnym przewidywaniem niektórych sytuacji"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "514de88b-2720-46c7-8cac-8c461c4a5d41",
   "metadata": {},
   "source": [
    "### Analiza zależności błędu od wartości rzeczywistej"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "4904b4d7-05b3-4be6-98d1-41a8b57a6ace",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 6))\n",
    "plt.scatter(y_test, errors_lin, alpha=0.5)\n",
    "plt.axhline(0, color='red', linestyle='--')\n",
    "plt.title(\"Błąd w zależności od rzeczywistej wartości\")\n",
    "plt.xlabel(\"Rzeczywiste wartości GPA\")\n",
    "plt.ylabel(\"Błąd\")\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af68058c-6484-4fdf-8e90-54d7a9e272f3",
   "metadata": {},
   "source": [
    "- Punkty błędów są rozmieszczone stosunkowo równomiernie wokół linii zerowej (czerwona linia), co ponownie sugeruje, że model nie wykazuje tendencji do systematycznego zawyżania lub zaniżania wyników..\n",
    "- Można zauważyć lekką zmienność rozrzutu błędów w zależności od wartości GPA. Dla niższych wartości GPA błędy są rozproszone, podczas gdy dla wyższych wartości błędy są nieco mniejsze. Może to sugerować, że model lepiej przewiduje wyższe wartości GPA, podczas gdy w niższych zakresach występuje większa niepewność.\n",
    "- Kilka punktów mocniej odbiega od linii zerowej, co może wskazywać na przypadki, w których model znacząco się myli."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "081d8ed8-3d29-4ac6-974e-cd58bcfb3274",
   "metadata": {},
   "source": [
    "### Sprawdzenie największego wpływu cech na predykcje"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "839762f8-f051-48f8-a7b2-442c032ff9d9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              Feature  Coefficient\n",
      "5            Absences    -0.721500\n",
      "7     ParentalSupport     0.147838\n",
      "4     StudyTimeWeekly     0.145027\n",
      "6            Tutoring     0.064565\n",
      "8     Extracurricular     0.047387\n",
      "9              Sports     0.046248\n",
      "10              Music     0.038121\n",
      "0                 Age    -0.004301\n",
      "2           Ethnicity     0.003558\n",
      "1              Gender     0.002629\n",
      "11       Volunteering    -0.001320\n",
      "3   ParentalEducation     0.000125\n"
     ]
    }
   ],
   "source": [
    "feature_importance = pd.DataFrame({\n",
    "    'Feature': X_train.columns,\n",
    "    'Coefficient': lin_regressor.coef_\n",
    "})\n",
    "\n",
    "feature_importance = feature_importance.reindex(feature_importance['Coefficient'].abs().sort_values(ascending=False).index)\n",
    "print(feature_importance)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43938955-b10b-472c-8757-2c0050aa8742",
   "metadata": {},
   "source": [
    "Najbardziej braną pod uwage przez model cechą jest ilość nieobecności ucznia. Następny najwyższy wynik posiada wsparcie rodziców oraz ilość czasu poświęconego nauce. Reszta cech ma dość niskie wyniki co oznacza, że nie są bardzo istotne dla modelu, a nawet wynik ujemny dla wolontariatu może sugerować, zabiera on czas, który można poświęcić na nauke.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52e31597-e031-4502-a230-c316d71d31ea",
   "metadata": {},
   "source": [
    "### <a name='6'></a> Wnioski"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34b167b6-501a-47a1-afd9-02f39d6928f1",
   "metadata": {},
   "source": [
    "Analiza przeprowadzona w raporcie wskazuje, że model regresji liniowej osiągnął najlepsze wyniki spośród testowanych metod. Współczynnik determinacji R² na poziomie 0.95 potwierdza jego bardzo dobre dopasowanie do danych, a niska wartość średniego błędu absolutnego (MAE) wynosząca 0.0388 wskazuje na minimalne różnice między wartościami rzeczywistymi a przewidywanymi. \n",
    "\n",
    "Analiza błędów wykazała, że model nie jest podatny na przeuczenie, ponieważ wyniki uzyskane na zbiorach treningowych i testowych są do siebie zbliżone. Rozkład błędów predykcji jest niemal symetryczny i przypomina rozkład normalny, co oznacza brak systematycznych odchyleń prognoz. Większość błędów mieści się w granicach od -0.10 do 0.10, co wskazuje na wysoką dokładność modelu. Obserwuję się większą zmienność błędów w przypadku niższych wartości GPA, co sugeruje trudności w ich precyzyjnym przewidywaniu.\n",
    "\n",
    "Jeśli chodzi o wpływ poszczególnych zmiennych na przewidywane wyniki, największą rolę odegrała liczba nieobecności ucznia (Absences), która miała silny negatywny wpływ (-0.7215) na GPA. Pozytywny wpływ na GPA miały natomiast wsparcie rodziców (ParentalSupport) oraz czas przeznaczony na naukę (StudyTimeWeekly), odpowiednio 0.1478 i 0.1450.\n",
    "\n",
    "Aby dalej udoskonalić model, warto rozważyć zastosowanie bardziej zaawansowanych technik, takich jak modelowanie nieliniowe, które mogłoby lepiej odwzorować złożone zależności w danych. Istotne byłoby także przeprowadzenie dogłębnej analizy wartości odstających, co może pomóc w identyfikacji trudnych do przewidzenia przypadków. Dodanie nowych zmiennych mogłoby również zwiększyć dokładność prognoz."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
